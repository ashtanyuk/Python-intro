#+TITLE: Краткое пособие по языку программирования Python
#+SETUPFILE: ../../css/level-2.orgcss


* Списки и кортежи

*Список* - это набор изменяемых элементов.
*Кортеж* - набор неизменяемых.

Создание списка:

#+begin_src python
>>> list(range(5))
[0, 1, 2, 3, 4]
#+end_src

Создание кортежа:

#+begin_src python
>>> tuple(range(5))
(0, 1, 2, 3, 4)
#+end_src


Создание пустых списка и кортежа:

#+begin_src python
a=[]
b=()
#+end_src


Как ссылаться на элементы? Можно делать это через индекс, например [0]. Можно ссылаться на часть списка, например [1:]

#+begin_src python
>>> a=[1,2,3,4,5]
>>> a[0]
1
>>> a[1:]
[2, 3, 4, 5]
>>>
#+end_src


Можно ссылаться на подмассив:

#+begin_src python
>>> a[1:3]
[2, 3]
>>>
#+end_src


А вот так можно указывать элементы с конца:

#+begin_src python
>>> a[:-1]
[1, 2, 3, 4]
>>> a[:-2]
[1, 2, 3]
>>>
#+end_src


* Функции

** Основы

Объявление функции в Питоне:

#+begin_src python
def fname(parameters):
   body
#+end_src


Функция без параметров

#+begin_src python
def hello():
   print("Hello, all!")
#+end_src


Функция с параметром

#+begin_src python
def hello(name):
   print("Hello, "+name)
#+end_src


Вызов функции:

#+begin_src python
hello("Вася")
#+end_src


Более сложный пример:

#+begin_src python
# Build and return a list
def firstn(n):
  num, nums = 0, []
  while num < n:
    nums.append(num)
    num += 1
  return nums

lst=firstn(100) 
sum_of_first_n = sum(lst)
print(sum_of_first_n)
print(lst)
#+end_src


Из функции возвращается список, который можно обработать стандартной функцией ~sum~, в результате определяется сумма элементов списка

Можно вернуть пару явно

#+begin_src python
def pair():
  return [2,2]

print(pair())
#+end_src


Если написать без скобок, то возвращается "кортеж" (?) (2,2)

Рассмотрим пример функции, считающую последовательность Фибоначчи:

#+begin_src python
def fib(n):    
     a, b = 0, 1
     while a < n:
       print(a, end=' ')
       a, b = b, a+b
       print()

>>> fib(2000)
0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597
#+end_src


Вариант той же функции, только с возвращением списка:

#+begin_src python
>>> def fib2(n):  
...     result = []
...     a, b = 0, 1
...     while a < n:
...         result.append(a)    
...         a, b = b, a+b
...     return result
...
>>> f100 = fib2(100)    
>>> f100            
[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
#+end_src


** Рекурсия

Рассмотрим вычисление факториала:

#+begin_src python
>>> def fact(n):
...   if n<=1:
...     return 1
...   else:
...     return n*fact(n-1)
...
>>> fact(10)
3628800
>>>
#+end_src


>*Упражнение*
>Написать функцию, определяющую сумму элементов списка двумя способами: итеративным (циклом) и рекурсивным.



** Лямбда-функции

Безымянные функции, которые можно сохранить в переменной или сразу вызвать.

#+begin_src python
square=lambda x: x*x
print(square(10))
#+end_src


Можно и так:

#+begin_src python
print( (lambda x: x*x)(5) )
#+end_src


Безымянные функции можно передавать в качестве параметра в другие функции и возвращать в качестве результата из функций

#+begin_src python
def getfun():
  return lambda x:x*x
print(getfun()(2))
#+end_src



Самое главное и очевидное применение: использование в качестве параметров там, где функция используется однократно

#+begin_src python
a=[53,78,23,79,0,34,12,92,112]
b=sorted(a,key=lambda x: x%10)
print(b)
>>>[0, 12, 92, 112, 53, 23, 34, 78, 79]
#+end_src


Массив сортируется, исходя из значения параметра `key` (остаток от деления на 10).


** Специальные функции для обработки данных

Определим сумму ряда чисел от 1 до 100 (включительно)

#+begin_src python
print(sum(range(1,101)))
>>> 5050
#+end_src


Зададим функцию-предикат, проверяющую, делится ли аргумент с остатком на 2 и на 3


#+begin_src python
def f(x): return x % 2 != 0 and x % 3 != 0
#+end_src


Теперь можно отфильтровать из ряда числа, удовлетворяющие данному условию

#+begin_src python
>>> list(filter(f,range(1,101)))
[1, 5, 7, 11, 13, 17, 19, 23, 25, 29, 31, 35, 37, 41, 43, 47, 49, 53, 55, 59, 61, 65, 67, 71, 73, 77, 79, 83, 85, 89, 91, 95, 97]
#+end_src


И последнее: можно найти сумму этих чисел:

#+begin_src python
>>> sum(list(filter(f,range(1,101))))
1633
#+end_src


> *Упражнение:*
> Перепишите выражение с использованием lambda-функции


Еще одна полезная и интересная функция - ~map~. Она применяет функцию к каждому элементу списка.

#+begin_src python
>>> list(map(lambda x: x*x,range(10)))
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
#+end_src


Функция `reversed` переставляет элементы списка в обратном порядке:

#+begin_src python
list(reversed(list(map(lambda x: x*x,range(10))))
>>>[81, 64, 49, 36, 25, 16, 9, 4, 1, 0]
#+end_src



** Задания

- Напишите функцию, проверяющую, является ли список палиндромом (последовательности слева направо и справа налево совпадают). Функция возвращает либо `True` либо `False`
- Написать функцию репликатор, которая получает на вход список и число, далее формирует список, в котором каждый элемент повторяется заданное число раз
- Написать функцию, проверяющую, является ли переданное число простым


* Списковые выражения

Списковые выражения создают список элементов

#+begin_src python
>>> [x for x in range(10)]
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
#+end_src


Решим задачу с генерацией списка, куда входят числа, делящиеся с остатком на 2 и на 3:

#+begin_src python
[x for x in range(100) if x % 2 != 0 and x % 3 != 0]
[1, 5, 7, 11, 13, 17, 19, 23, 25, 29, 31, 35, 37, 41, 43, 47, 49, 53, 55, 59, 61, 65, 67, 71, 73, 77, 79, 83, 85, 89, 91, 95, 97]
#+end_src


Эти выражение удобны, поскольку не требуют создания специальной функции, формирующей список

#+begin_src python
>>> a = []
>>> for i in range(1,15):
...     a.append(i)
... 
>>> a
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
#+end_src


а теперь с помощью спискового выражения:

#+begin_src python
>>> a = [i for i in range(1,15)]
>>> a
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
#+end_src


Извлекаем из строки цифры:

#+begin_src python
>>> a = "lsj94ksd231 9"
>>> b = [int(i) for i in a if '0'<=i<='9']
>>> b
[9, 4, 2, 3, 1, 9]
#+end_src


* Генераторы

Также существуют специальные функции - *генераторы*, которые могут создавать списки:

*Генераторы* - итерируемые объекты, но, в общем случае, вы можете их использовать только один раз. Это связано с тем, что они не хранят все значения в памяти, а генерируют значения "на лету" - по мере запроса:

Простейшее определение генератора:


#+begin_src python
def generate_ints(N):
    for i in range(N):
        yield i
#+end_src

Пример использования:

#+begin_src python
list(generate_ints(10))
>>>[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
#+end_src

Генераторы позволяют создавать списки проще и быстрее.


Выходные данные генератора такие же, как у списка. Так в чем же разница? Одно из главных отличий заключается в том, как в список и генератор хранят элементы в памяти. Списки хранят все элементы в памяти сразу, тогда как генераторы "создают" каждый элемент на лету, отображая их, а затем перемещаются к следующему элементу, удаляя предыдущий элемент из памяти.

список можно перебирать столько раз, сколько захотите, но генератор можно перебирать только один раз. Для повторной итерации необходимо создать генератор снова.


** yield

Ключевое слово *yield*, в отличие от оператора **return**, используется для превращения обычной функции Python в генератор. Оно используется в качестве альтернативы одновременному возвращению целого списка.


Получение значение из генератора:

#+begin_src python
def gen():
   for i in (1,2,3):
     yield i
g=gen()
next(g)
>>>1
#+end_src

> *Задача*
> - Написать реализацию бесконечной последовательности чисел с помощью генератора. Можно взять последовательность Фибоначчи или последовательность простых чисел

* Небольшие фокусы

Функция `eval` позволяет выполнить выражение Питона, заданного в виде строки:

#+begin_src python
eval("2+2")
>>>4
#+end_src

> *Задача*

> - Написать функцию, проверяющую правильность расстановки скобок в арифметическом выражении.

> - Написать функцию, вычисляющую арифметическое выражение, записанное в префиксной форме. Выражение задается как набор бинарных операций в круглых скобках, то есть ~(* (- 2 1) (/ 4 2))~. Скобки для группировки операций обязательны.

> - Подсчитать количество счастливых билетов, их процент ко всем шестизначным билетам

** Псевдослучайные числа


Функции для работы с псевдослучайными числами находятся в модуле *random*.

#+begin_src python
import random
value=random.randrange(N)
#+end_src

> *Задача*

> - Реализовать неэффективную "болотную" сортировку,в которой элементы выстраиваются на произвольные (случайные) позиции. Сортировка продолжается до тех пор, пока элементы случайно не займут правильные позиции. Посмотреть в документации, как измерить время работы программы.

* Работа с файлами

Основные функции работы с файлами:

*open* - открытие файла

В следующем примере мы открываем файл на чтение и читаем его содержимое в список строк

#+begin_src python
f=open("имя")
text=lst(f)
#+end_src


> *Задача*
> - Написать программу, выводящую случайный афоризм из текстового файла на экран. Написать реализацию с помощью генератора


* Регулярные выражения в Python


Сначала импортируем пакет:

#+begin_src python
import re
#+end_src

Самые популярные средства для работы с регулярными выражениями


- re.match()
- re.search()
- re.findall()
- re.split()
- re.sub()
- re.compile()


** match()

Данная функция проверяет, начинается ли строка с данного выражения

#+begin_src python
result = re.match('12', '12345678')
print result

Результат:
<_sre.SRE_Match object at 0x0000000009BE4370>
#+end_src

Искомая подстрока найдена. Чтобы вывести ее содержимое, используем метод ~group()~. 

#+begin_src python
result = re.match('12', '12345678')
print result.group(0)

Результат:
12
#+end_src

Пример с несуществующей строкой:

#+begin_src python
result = re.match('23', '123456789')
print result

Результат:
None
#+end_src

Для того, чтобы увидеть начало совпавшего фрагмента вызывается *res.start()*, а для окончания: *res.end()*.

** search()

Функция *search* ищет по всей строке и возвращает первое совпадение

** findall()

Функция *findall* возвращает список всех найденных подстрок

** split()

Функция *split* разбивает строку по заданному шаблону

#+begin_src python
>>> res=re.split(",","562,42,5,6,7,5,4,46,56")
>>> res
['562', '42', '5', '6', '7', '5', '4', '46', '56']
>>>
#+end_src

У функции есть параметр  ~maxsplit=1~, который управляет количеством разбиений (слева направо).

** sub()

Ищет шаблон в строке и заменяет его на новое значение.




** Таблица обозначений:


| Оператор	| Описание                                        |
|---------------| ------------------------------------------------|  
| .    	        | Один любой символ, кроме новой строки \n.        |
| ?	        | 0 или 1 вхождение шаблона слева                  |
| +	        | 1 и более вхождений шаблона слева                |
| *	        | 0 и более вхождений шаблона слева                |
| \w            | Любая цифра или буква (\W — все, кроме буквы или цифры)  |
| \d	        | Любая цифра [0-9] (\D — все, кроме цифры)                |
| \s	        | Любой пробельный символ (\S — любой непробельный символ)  |
| \b	        | Граница слова   |
| [..]	        | Один из символов в скобках ([^..] — любой символ, кроме тех, что в скобках)  |
| \	        | Экранирование специальных символов (\. означает точку или \+ — знак «плюс») |
| ^ и $	        | Начало и конец строки соответственно   |
| {n,m}         | От n до m вхождений ({,m} — от 0 до m) |
| a \vert{} b         | Соответствует a или b  |
| ()            | Группирует выражение и возвращает найденный текст |
| \t, \n, \r    | Символ табуляции, новой строки и возврата каретки соответственно |
|               | |




* Классы и ООП

Для разработки больших и сложных программ используется **объектно-ориентированный подход (ООП)**.

Для ООП нужно описывать программные сущности: **классы**.

** Описание класса

#+begin_src python
class Person:
   name="Vasya"
   def who(self):
      print("My name is "+self.name)
#+end_src

Далее мы можем создать экземпляр класса и воспользоваться его *методом*:

#+begin_src python
v=Person()
v.who()
#+end_src

Разумеется, любой экземпляр класса будет печатать одно и то же. Поэтому внесем изменение в пример:

#+begin_src python
class Person:
   name="Vasya"
   def __init__(self,name):
      self.name=name
   def who(self):
      print("My name is "+self.name)
#+end_src

Теперь при создании экземпляра можно указывать параметр:

#+begin_src python
v=Person("Маша")
v.who()
#+end_src

А вот так можно использовать общие для класса переменные:

#+begin_src python
  class Person:
     population=0
     def __init__(self,name):
        self.name=name
        Person.population+=1
     def who(self):
        print("My name is "+self.name)
        print("Total: "+str(Person.population))
 
 p1=Person("Маша")
 p1.who()
 p2=Person("Саша")
 p2.who()
#+end_src

Вывод программы:

#+begin_src python
My name is Маша
Total: 1
My name is Саша
Total: 2
#+end_src

В классах можно создавать деструкторы и потом использовать их (команда `del`)

** Наследование

#+begin_src python
class SchoolMember: 
  def __init__(self, name, age):
    self.name = name
    self.age = age
    print("Initialized SchoolMember: ",self.name)
  def tell(self):
    print("Name:  Age: ", self.name, self.age)

class Teacher(SchoolMember):
  def __init__(self, name, age, salary): 
    SchoolMember.__init__(self, name, age) 
    self.salary = salary
    print ("Initialized Teacher: ", self.name)
  def tell(self): 
    SchoolMember.tell(self)
    print("Salary: ", self.salary)

class Student(SchoolMember):
  def __init__(self, name, age, marks): 
    SchoolMember.__init__(self, name, age) 
    self.marks = marks
    print("Initialized Student: ",self.name)
  def tell(self): 
    SchoolMember.tell(self)
    print("Marks: ",self.marks)

t = Teacher("Mrs. Shrividya", 40, 30000)
s = Student("Swaroop", 22, 75)
members = [t, s]
for member in members:
  member.tell()
#+end_src


* Интересные пакеты

`pandas` - анализ данных
`pygments` - подготовка документации
`pil` - обработка изображений
`matplotlib` - построение графиков




**  Построение графиков (matplotlib)

Простой график:

#+begin_src python
import matplotlib
import matplotlib.pyplot as plt
import numpy as np

t = np.arange(0.0, 2.0, 0.01)
s = 1 + np.sin(2 * np.pi * t)

fig, ax = plt.subplots()
ax.plot(t, s)

ax.set(xlabel='time (s)', ylabel='voltage (mV)',
       title='About as simple as it gets, folks')
ax.grid()

fig.savefig("test.png")
plt.show()
#+end_src

График со штрих-пунктиром:

#+begin_src python
import numpy as np
import matplotlib.pyplot as plt

x = np.linspace(0, 10, 500)
y = np.sin(x)

fig, ax = plt.subplots()

line1, = ax.plot(x, y, label='Using set_dashes()')
line1.set_dashes([2, 2, 10, 2])  

line2, = ax.plot(x, y - 0.2, dashes=[6, 2], label='Using the dashes parameter')

ax.legend()
plt.show()
#+end_src

Несколько кривых


#+begin_src python
import matplotlib.pyplot as plt
import numpy as np

x = np.linspace(-5, 5, 100)

def sigmoid(alpha):
    return 1 / ( 1 + np.exp(- alpha * x) )

dpi = 80
fig = plt.figure(dpi = dpi, figsize = (512 / dpi, 384 / dpi) )

plt.plot(x, sigmoid(0.5), 'ro-')
plt.plot(x, sigmoid(1.0), 'go-')
plt.plot(x, sigmoid(2.0), 'bo-')

plt.legend(['A = 0.5', 'A = 1.0', 'A = 2.0'], loc = 'upper left')

fig.savefig('sigmoid.png')
#+end_src

Еще пример:

#+begin_src python
import matplotlib as mpl 
import matplotlib.pyplot as plt 
import math

dpi = 80
fig = plt.figure(dpi = dpi, figsize = (512 / dpi, 384 / dpi) )
mpl.rcParams.update({'font.size': 10})

plt.axis([0, 10, -1.5, 1.5])

plt.title('Sine & Cosine')
plt.xlabel('x')
plt.ylabel('F(x)')

xs = []
sin_vals = []
cos_vals = []

x = 0.0 
while x < 10.0:
    sin_vals += [ math.sin(x) ]
    cos_vals += [ math.cos(x) ]
    xs += [x] 
    x += 0.1 

plt.plot(xs, sin_vals, color = 'blue', linestyle = 'solid',
         label = 'sin(x)')
plt.plot(xs, cos_vals, color = 'red', linestyle = 'dashed',
         label = 'cos(x)')

plt.legend(loc = 'upper right')
fig.savefig('trigan.png')
#+end_src

* Решения задач


** Проверка списка на палиндром:

#+begin_src python
def pal(lst):
	return lst==list(reversed(lst));

print(pal([1,2,3,2,1]))
print(pal([1,2,3,2,1,1]))

>>> True
    False
#+end_src

** Тест числа на простоту

#+begin_src python
def prime1(value):
	return len([x for x in range(2,value) if value%x==0])==0

print(prime1(2))
print(prime1(3))
print(prime1(4))
print(prime1(17))
#+end_src

** Репликатор

Написать функцию, которая повторяет каждый элемент списка заданное число раз

Простейшая реализация на циклах:

#+begin_src python
def replicator(lst,n):
    res=[]
    for i in lst:
        for x in range(n):
            res.append(i)
    return res

print(replicator(['a','b','c'],5))
#+end_src


** Проверка расстановки скобок

завести пустой стек

#+begin_src python
для каждого символа строки
  если он присутствует в наборе скобок
    если он отсутствует в словаре соответствий, т. е. это открывающая скобка
      добавить в стек этот символ
    иначе он закрывающая скобка
      если значение из словаря соответствий отличается от вершины стека
        return false
      иначе
        выкинуть последний элемент стека

return стек пуст
#+end_src

#+begin_src python
def check(string):
brackets_open = ('(', '[', '{', '<')
brackets_closed = (')', ']', '}', '>')
stack = []
for i in string:
    if i in brackets_open:
        stack.append(i)
    if i in brackets_closed:    
        if len(stack) == 0:
            return False
        index = brackets_closed.index(i)
        open_bracket = brackets_open[index]
        if stack[-1] == open_bracket:
            stack = stack[:-1]  
        else: return False  
return (not stack)  
#+end_src

Реализация с двумя скобками:

#+begin_src python
def check(string):
  op = '('
  cl = ')'
  stack = []
  for i in string:
    if i==op:
      stack.append(i)
    if i==cl:    
      if len(stack) == 0:
        return False
      if stack[-1] == op:
        stack = stack[:-1]     
  return (not stack) 

print(check("(12)()"))
#+end_src


** Счастливые билеты

#+begin_src python
## суммирование цифр строки
def dsum(s):
   return sum([int(x) for x in list(s)])

def happy():
    count = 0
    for x in range(1000000):
      st = "%06d" % x
      if(dsum(st[:3])==dsum(st[3:6])):
        count +=1
    return count

print(happy())
#+end_src

** Бесконечный генератор последовательности

** Болотная сортировка с измерением времени

#+begin_src python
import random
import time

def bogosort(lst):
  sortlst=sorted(lst)
  while(lst!=sortlst):
    random.shuffle(lst)

start=time.time()
random.seed()
bogosort([random.randint(1,10) for x in range(10)])
end=time.time()
print(end-start)
#+end_src

# Еще примеры:

Генерация пароля:

#+begin_src python :comments org
import random
# Щепотка цифр
str1 = '123456789'
# Щепотка строчных букв
str2 = 'qwertyuiopasdfghjklzxcvbnm'
# Щепотка прописных букв. Готовится преобразованием str2
в верхний     регистр.
str3 = str2.upper()
print(str3)
# Выведет: 'QWERTYUIOPASDFGHJKLZXCVBNM'

# Соединяем все строки в одну
str4 = str1+str2+str3
print(str4)
# Выведет: '123456789qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM'

# Преобразуем получившуюся строку в список
ls = list(str4)
# Тщательно перемешиваем список
random.shuffle(ls)
# Извлекаем из списка 12 произвольных значений
psw = ''.join([random.choice(ls) for x in range(12)])
# Пароль готов
print(psw)
# Выведет: '1t9G4YPsQ5L7'
#+end_src

Тоже самое в 2 строки:

#+begin_src python
import random
print(''.join([random.choice(list('123456789qwertyuiopasdfghjklzxc
vbnmQWERTYUIOPASDFGHJKLZXCVBNM')) for x in range(12)]))
#+end_src


